AWSTemplateFormatVersion: 2010-09-09
Description: Apper DevOps Engineer Technical Challenge - Sammy Medina - Tier 2 - CI/CD

Parameters:
  ###### Shared Parameters ######
  ProjectName:
    Description: Please enter the name of the project
    Type: String
    Default: rsmedina
  ChallengeTier:
    Description: Please enter the challenge tier for this stack (e.g. 1)
    Type: String
    Default: "2"
  Environment:
    Description: Please enter the environment for this stack (e.g. STG, PROD)
    Type: String
    Default: CICD
  AWSMainAccountNumber:
    Description: Please enter the AWS account number for this stack
    Type: String
    Default: 485323199507

# Mappings:

# Conditions:

Resources:
  ###### S3 ######
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub ${ProjectName}-tier-${ChallengeTier}-cicd
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: TIER
          Value: !Ref ChallengeTier
        - Key: ENV
          Value: !Ref Environment
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket 
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action: "s3:*"
            Resource: !Join [ "", [ "arn:aws:s3:::", !Ref S3Bucket, /* ] ]
            Condition:
              StringLike:
                "aws:userId":
                  - !Join [ ":", [ !GetAtt CodePipelineIAMRole.RoleId, "*" ] ]
                  - !Join [ ":", [ !GetAtt CodeBuildIAMRole.RoleId, "*" ] ]
                  - !Ref AWSMainAccountNumber

  ###### Elastic Container Repository #######
  ExpressAppRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${ProjectName}-tier-${ChallengeTier}-ecr
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCicdPushPull
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - s3.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:BatchGetImage"
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:PutImage"
              - "ecr:InitiateLayerUpload"
              - "ecr:UploadLayerPart"
              - "ecr:CompleteLayerUpload"
      Tags:
        - Key: TIER
          Value: !Ref ChallengeTier

  ###### IAM ######
  CodePipelineIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - s3.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub ${ProjectName}-tier-${ChallengeTier}-${Environment}-codepipeline-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "iam:PassRole"
                Resource: "*"
                Effect: "Allow"
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - "cloudformation.amazonaws.com"
                      - "ec2.amazonaws.com"
                      - "codepipeline.amazonaws.com"
                      - "codebuild.amazonaws.com"
                      - "codestar-connections.amazonaws.com"
                      - "s3.amazonaws.com"
              - Action:
                  - "codedeploy:CreateDeployment"
                  - "codedeploy:GetApplicationRevision"
                  - "codedeploy:GetDeployment"
                  - "codedeploy:GetDeploymentConfig"
                  - "codedeploy:RegisterApplicationRevision"
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "cloudformation:CreateStack"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:DeleteChangeSet"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:SetStackPolicy"
                  - "cloudformation:ValidateTemplate"
                  - "iam:PassRole"
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuildBatches"
                  - "codebuild:StartBuildBatch"
                Resource: !GetAtt CodeBuildProjectBuildExpressMiniapp.Arn
                Effect: "Allow"
              - Action:
                  - "codestar-connections:UseConnection"
                Resource: !Ref CodePipelineGithubConnection
                Effect: "Allow"
              - Action:
                  - "s3:*"
                Resource: !GetAtt S3Bucket.Arn
                Effect: "Allow"
              - Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:PutImage"
                  - "ecr:UploadLayerPart"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:DescribeImages"
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "ecs:*"
                Resource: "*"
                Effect: "Allow"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkRoleCore
      Description: The service role used for CodePipeline
      RoleName: !Sub ${ProjectName}-tier-${ChallengeTier}-${Environment}-codepipeline-service-role
      Tags:
        - Key: TIER
          Value: !Ref ChallengeTier
        - Key: ENV
          Value: !Ref Environment
  
  CodeBuildIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - s3.amazonaws.com
                - cloudformation.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub ${ProjectName}-tier-${ChallengeTier}-${Environment}-codebuild-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:ListBucket"
                  - "s3:GetBucketAcl"
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "codebuild:CreateReportGroup"
                  - "codebuild:CreateReport"
                  - "logs:CreateLogStream"
                  - "codebuild:UpdateReport"
                  - "s3:PutObjectVersionAcl"
                  - "s3:GetBucketLocation"
                  - "codebuild:BatchPutTestCases"
                  - "s3:PutObjectAcl"
                  - "s3:GetObjectVersion"
                Resource:
                  - "arn:aws:s3:::*"
                  - "arn:aws:logs:*:*:log-group:/aws/codebuild/*"
                  - "arn:aws:codebuild:*"
                Effect: "Allow"
              - Action:
                  - "codestar-connections:UseConnection"
                Resource: !Ref CodePipelineGithubConnection
                Effect: "Allow"
              - Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:PutImage"
                  - "ecr:UploadLayerPart"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:DescribeImages"
                Resource: "*"
                Effect: "Allow"
      Description: The service role used for CodeBuild
      RoleName: !Sub ${ProjectName}-tier-${ChallengeTier}-${Environment}-codebuild-service-role
      Tags:
        - Key: TIER
          Value: !Ref ChallengeTier
        - Key: ENV
          Value: !Ref Environment

  ###### CodeStar Connection ######
  CodePipelineGithubConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties:
      ConnectionName: !Sub ${ProjectName}-tier-${ChallengeTier}-${Environment}-github 
      ProviderType: GitHub
      Tags:
        - Key: TIER
          Value: !Ref ChallengeTier
        - Key: ENV
          Value: !Ref Environment

  ###### Code Build ######
  CodeBuildProjectBuildExpressMiniapp:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts: 
        Type: CODEPIPELINE
      Cache:
        Type: S3
        Location: !Join [ "/", [ !Ref S3Bucket, "cache" ] ]
      ConcurrentBuildLimit: 3
      Description: The CodeBuild project for building the express-miniapp project
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWSMainAccountNumber
          - Name: IMAGE_TAG
            Value: latest
          - Name: IMAGE_REPO_NAME
            Value: !Ref ExpressAppRepository
      Name: !Sub ${ProjectName}-tier-${ChallengeTier}-${Environment}-codebuild-build-express-miniapp
      QueuedTimeoutInMinutes: 5
      ServiceRole: !GetAtt CodeBuildIAMRole.Arn 
      Source: 
        Type: CODEPIPELINE
        BuildSpec: buildspec-2.yml
      Tags:
        - Key: TIER
          Value: !Ref ChallengeTier
        - Key: ENV
          Value: !Ref Environment
      TimeoutInMinutes: 5

  ###### Code Pipeline ######
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref S3Bucket
        Type: S3
      Name: !Sub ${ProjectName}-tier-${ChallengeTier}-${Environment}-build-pipeline
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineIAMRole.Arn
      Stages: 
        - Name: Pre-Build
          Actions:
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn: !GetAtt CodePipelineGithubConnection.ConnectionArn
                FullRepositoryId: SammyJumpstart23/rsmedina-devops-challenge
                BranchName: !Sub tier-${ChallengeTier}
                OutputArtifactFormat: CODEBUILD_CLONE_REF
              Name: Source-GitHub
              OutputArtifacts:
                - Name: express-miniapp
              RunOrder: 1
        - Name: Build-Docker-Image
          Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildProjectBuildExpressMiniapp
                PrimarySource: express-miniapp
              Name: Build-and-Push
              InputArtifacts:
                - Name: express-miniapp
              OutputArtifacts:
                - Name: built-express-miniapp
              RunOrder: 1
        - Name: Push-Image-Definition
          Actions:
            - ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                BucketName: !Ref S3Bucket
                Extract: false
                ObjectKey: imageDefinition.zip
              Name: Push-to-S3
              InputArtifacts:
                - Name: built-express-miniapp
              RunOrder: 1
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-tier-${ChallengeTier}-${Environment}-codepipeline
        - Key: TIER
          Value: !Ref ChallengeTier
        - Key: ENV
          Value: !Ref Environment

Outputs:
  CodePipelineIAMRole:
    Description: Refers to the IAM Service Role used for CodePipeline
    Value: !GetAtt CodePipelineIAMRole.Arn
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", "CodePipelineIAMRole" ] ]

  CICDBucket:
    Description: Refers to the bucket used for CI/CD pipeline
    Value: !Ref S3Bucket
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", "CICDBucket" ] ]

  ExpressAppRepository:
    Description: Refers to the ECR used for the CI/CD pipeline
    Value: !Ref ExpressAppRepository
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", "ExpressAppRepository" ] ]
